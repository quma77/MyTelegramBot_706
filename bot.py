from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import sqlite3
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler
import re


con = sqlite3.connect("baze_706.db")
cur = con.cursor()




ADMIN = 1093664497   
ADMIN_2 = 806552022
ADMIN_3 = 749427159
ADMIN_4 = 1053514876


cur.execute('''CREATE TABLE IF NOT EXISTS baze_706 (
    id INTEGER PRIMARY KEY,
    name TEXT,
    ek INTEGER,
    ekmk INTEGER,
    dis INTEGER,
    mp INTEGER
)''')
con.commit()

contacts = [
    (1093664497, '–õ–∏—Å–∏—Ü—ã–Ω –°–≤—è—Ç–æ—Å–ª–∞–≤ ADM', 0, 0, 0, 0),  
    (749427159, '–ì—Ä–∏–±–∞–Ω–æ–≤ –†–æ–¥–∏–æ–Ω ADM', 0, 0, 0, 0),
    (1212927001, '–ì–∏–±–∞–¥—É–ª–ª–∏–Ω –ê–º–∏—Ä', 0, 0, 0, 0),
    (772425041, '–Ø–∏–∫–±–∞–µ–≤ –î–∞–Ω–∏–∏–ª', 0, 0, 0, 0),
    (806552022, '–ú–∞—Ä—Ç—ã–Ω–æ–≤–∞ –î–∞—Ä—å—è ADM', 0, 0, 0, 0),
    (877798690, '–ì–∞—Ä–∏–ø–æ–≤–∞ –ê–π–∑–∏—Ä–∞', 0, 0, 0, 0),
    (1664532632, '–§–∞–π—Ä—É—à–∏–Ω–∞ –ì—É–ª—å–Ω–∞–∑', 0, 0, 0, 0),
    (5080403377, '–ì–æ—Ä–±–∞—Ç–æ–≤–∞ –ò–Ω–¥–∏—Ä–∞', 0, 0, 0, 0),
    (1019777881, '–¢–∞–≥–∏—Ä–æ–≤–∞ –õ–∏–Ω–∏–∑–∞', 0, 0, 0, 0),
    (5918430941, '–¢–∞–≥–∏—Ä–æ–≤ –ë—É–ª–∞—Ç', 0, 0, 0, 0),
    (5694532778, '–•–∞–ª–∏—Ç–æ–≤ –ë—É–ª–∞—Ç', 0, 0, 0, 0),
    (1419713368, '–°–∞–±–∏—Ç–æ–≤–∞ –õ—è–π—Å–∞–Ω', 0, 0, 0, 0),
    (839739793, '–ì–∞–ª–∏–µ–≤–∞ –õ–∞–Ω–¥—ã—à', 0, 0, 0, 0),
    (1053514876, '–ì–∞–ª–µ–µ–≤ –í–∞–¥–∏–º ADM', 0, 0, 0, 0),
    (1, '–ó–∏–º—É–ª—é–∫–∏–Ω–∞ –ù–∞–¥–µ–∂–¥–∞', 0, 0, 0, 0),
    (1, '–ñ–∏–≥–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π', 0, 0, 0, 0),
    (1, '–ì–∏–ª—è–∑–æ–≤ –ù–∞–∏–ª—å', 0, 0, 0, 0),
    (922068077, '–°–∞–ª–∏–º–≥–∞—Ä–∞–µ–≤–∞ –ú–∏–ª–µ–Ω–∞', 0, 0, 0, 0),
    (5143322660, '–ö–æ–∑–∏–º–∂–∞–Ω–æ–≤–∞ –†—É–º–∏—è', 0, 0, 0, 0),
    (1, '–ì–∞—Ä–∏–ø–æ–≤ –¢–∏–º—É—Ä', 0, 0, 0, 0),
    (1, '–°–∞—Ñ–∏–Ω–∞ –†–∞–Ω–∏—è', 0, 0, 0, 0),
    (1, '–ê–±–¥–µ–ª–≥–∞–Ω–∏–µ–≤ –ò–ª—å–Ω–∞—Ä', 0, 0, 0, 0),
    (1, '–ü—è—Ç–∏–±—Ä–∞—Ç–æ–≤ –ê—Ä—Ç—ë–º', 0, 0, 0, 0),
    (1, '–ë–∞–ª–∞—É—Ö–∏–Ω–∞ –û–ª—å–≥–∞', 0, 0, 0, 0),
    (1, '–ì–ª—É—Ö–æ–≤–∞ –Æ–ª–∏—è', 0, 0, 0, 0),
    (1, '–Ø–∫–æ–≤–ª–µ–≤–∞ –ö—Ä–∏—Å—Ç–∏–Ω–∞', 0, 0, 0, 0),
    (1, '–ö—Ä—é–∫–æ–≤–∞ –ö—Ä–∏—Å—Ç–∏–Ω–∞', 0, 0, 0, 0),
    
    
    
    
    

    
    
    
    

    
    



    
    
    
    

    
]

for contact in contacts:
    cur.execute('SELECT COUNT(*) FROM baze_706 WHERE id = ?', (contact[0],))
    exists = cur.fetchone()[0]
    if exists == 0:
        cur.execute('''
INSERT INTO baze_706 (id, name, ek, ekmk, dis, mp) VALUES (?, ?, ?, ?, ?, ?)
''', contact) # –ò—Å–ø–æ–ª—å–∑—É–µ–º cur.execute() –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        con.commit()
        
# –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_username(user_id):
    cur.execute("SELECT name FROM baze_706 WHERE id = ?", (user_id,))
    result = cur.fetchone()
    return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def user_exists(user_id):
    cur.execute("SELECT id FROM baze_706 WHERE id = ?", (user_id,))
    return cur.fetchone() is not None

# –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_database(user_id, category, value):
    try:
        cur.execute(f"UPDATE baze_706 SET {category} = {category} + ? WHERE id = ?", (value, user_id))
        con.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_exists(user_id):
        #–ê–¥–º–∏–Ω
        if int(update.message.from_user.id) == ADMIN or ADMIN_2 or ADMIN_3:
            await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {get_username(user_id)}! –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–±—è', reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã'], ['–û—Ç–∫—Ä—ã—Ç—å –ë–î üìÅ'], ['–ü—Ä–æ–¥–∞–∂–∏ üìä'], ['–û—Ç—á–µ—Ç üìã'], ['‚ùå –û—Ç–∏—á—Å—Ç–∏—å –ø—Ä–æ–¥–∞–∂–∏ ‚ùå']]))   
        #–ü—Ä–æ–¥–∞–≤–µ—Ü
        else:
            await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {get_username(user_id)}!', reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text('–ñ–¥—É —Ç–≤–æ–∏ –ø—Ä–æ–¥–∞–∂–∏. –ó–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @qumaqq\n–£—Å–ø–µ—Ö–æ–≤))',reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã']]))
            context.user_data['state'] = 'awaiting_number'
    else:
        await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É @qumaqq')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
async def process_number_state(update, context, text):
    try:
        number = int(text)
        reply_markup = ReplyKeyboardMarkup([[f'{number} ek', f'{number} ekmk'], [f'{number} dis', f'{number} mp'],  ['–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏']], resize_keyboard=True)
        await update.message.reply_text('–í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)
        context.user_data['number'] = number
        context.user_data['state'] = 'awaiting_category'
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def process_category_state(update, context, text):
    if text == '–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏':
        if update.message.from_user.id == ADMIN or ADMIN_2 or ADMIN_3:
            await update.message.reply_text("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã'], ['–û—Ç–∫—Ä—ã—Ç—å –ë–î üìÅ'], ['–ü—Ä–æ–¥–∞–∂–∏ üìä'], ['–û—Ç—á–µ—Ç üìã'], ['‚ùå –û—Ç–∏—á—Å—Ç–∏—å –ø—Ä–æ–¥–∞–∂–∏ ‚ùå']]))
            context.user_data.clear()  
            return 
        else:
            await update.message.reply_text("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã']]))
            context.user_data.clear()  
            return 
    else:
        try:
            number, category = parse_category(text)
            update_database(update.message.from_user.id, category, number)
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {number} –∫ {category}.", reply_markup=ReplyKeyboardRemove())
            await show_stats(update, context, category)
            context.user_data['state'] = 'awaiting_number'
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –†–∞–∑–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —á–∏—Å–ª–∞
def parse_category(text):
    parts = text.split()
    if len(parts) != 2:
        raise ValueError
    number = int(parts[0])
    category = parts[1].lower()
    if category not in ['ek', 'ekmk', 'dis', 'mp']:
        raise ValueError
    return number, category

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, category):
    cur.execute(f"SELECT {category} FROM baze_706 WHERE id = ?", (update.message.from_user.id,))
    stats = cur.fetchone()[0]
    context.user_data['state'] = 'awaiting_number'
    await update.message.reply_text(f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {category}: {stats}", reply_markup=ReplyKeyboardMarkup([["–í—ã–π—Ç–∏ —Å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂ ‚óÄÔ∏è"]]))

    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    text2 = update.message.text.lower()
    if not user_exists(update.message.from_user.id):
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É @qumaqq")
        return
    if 'state' not in context.user_data: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –í–ù–ï –±–ª–æ–∫–∞ elif
        context.user_data['state'] = None # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã":
            context.user_data['state'] = None
            cur.execute("SELECT ek FROM baze_706 WHERE id = ?", (int(update.message.from_user.id),))
            ek_stut = cur.fetchone()[0]
            cur.execute("SELECT ekmk FROM baze_706 WHERE id = ?", (int(update.message.from_user.id),))
            ekmk_stut = cur.fetchone()[0]
            cur.execute("SELECT dis FROM baze_706 WHERE id = ?", (int(update.message.from_user.id),))
            dis_stut = cur.fetchone()[0]
            cur.execute("SELECT mp FROM baze_706 WHERE id = ?", (int(update.message.from_user.id),))
            mp_stut = cur.fetchone()[0]
            await update.message.reply_text(f'–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≥–ª—è–¥–µ—Ç —Ç–∞–∫:\n–ï–ö: {ek_stut}\n–ï–ö–ú–ö: {ekmk_stut}\nDIS: {dis_stut}\n–ú–ü: {mp_stut}')
            
    elif text == "–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏":
        context.user_data['state'] = 'awaiting_number'
        await update.message.reply_text('–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂! —Ö—É–µ—Å–æ—Å)', reply_markup=ReplyKeyboardMarkup([["–í—ã–π—Ç–∏ —Å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂ ‚óÄÔ∏è"]]))
    elif text == "–í—ã–π—Ç–∏ —Å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂ ‚óÄÔ∏è":
        context.user_data['state'] = 'awaiting_category'
        if update.message.from_user.id == ADMIN or ADMIN_2 or ADMIN_3:
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂.", reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã'], ['–û—Ç–∫—Ä—ã—Ç—å –ë–î üìÅ'], ['–ü—Ä–æ–¥–∞–∂–∏ üìä'], ['–û—Ç—á–µ—Ç üìã'], ['‚ùå –û—Ç–∏—á—Å—Ç–∏—å –ø—Ä–æ–¥–∞–∂–∏ ‚ùå']]))
            context.user_data['state'] = None   
        else:
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂.", reply_markup = ReplyKeyboardMarkup([['–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ üí∏'], ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã']]))
            context.user_data['state'] = None
    elif context.user_data.get('state') == 'awaiting_number':
        try:
            number = int(text)
            await process_number_state(update, context, number) # –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ –≤ process_number_state
        except ValueError:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
    elif context.user_data.get('state') == 'awaiting_category':
        await process_category_state(update, context, text)
    elif text == "–û—Ç–∫—Ä—ã—Ç—å –ë–î üìÅ":
        if int(update.message.from_user.id) == ADMIN or ADMIN_2 or ADMIN_3:
            cur.execute("SELECT * FROM baze_706")
            rows = cur.fetchall()
            for row in rows:
                await update.message.reply_text(f"{row[1]}: –ï–ö|–ï–ö–ú–ö|–î–ò–°|–ú–ü: {row[2:]}")
        else:
            await update.message.reply_text('–ù–µ –≤—ã–π–¥–µ—Ç)')
    elif text == "–ü—Ä–æ–¥–∞–∂–∏ üìä":
        context.user_data['state'] = None
        if int(update.message.from_user.id) == ADMIN or ADMIN_2 or ADMIN_3:
            cur.execute("SELECT * FROM baze_706 WHERE ek > 0 OR ekmk > 0 OR dis > 0 OR mp > 0 ")
            rows = cur.fetchall()
            for row in rows:
                await update.message.reply_text(f"{row[1]}: –ï–ö|–ï–ö–ú–ö|–î–ò–°|–ú–ü: {row[2:]}")
            
            cur.execute("SELECT SUM(ek) FROM baze_706")
            total_ek = cur.fetchone()[0]
            cur.execute("SELECT SUM(ekmk) FROM baze_706")
            total_ekmk = cur.fetchone()[0]
            cur.execute("SELECT SUM(dis) FROM baze_706")
            total_dis = cur.fetchone()[0]
            cur.execute("SELECT SUM(mp) FROM baze_706")
            total_mp = cur.fetchone()[0]
            
            cur.execute("SELECT SUM(ek) FROM baze_706") 
            sum_ek = cur.fetchone()[0]
            cur.execute("SELECT SUM(ekmk) FROM baze_706") 
            sum_ekmk = cur.fetchone()[0]
            cur.execute("SELECT SUM(dis) FROM baze_706") 
            sum_dis = cur.fetchone()[0]
            sum_sell = sum_ek + sum_ekmk + sum_dis
            
            
            
            await update.message.reply_text(f"–ï–ö: {total_ek}\n–ï–ö–ú–ö: {total_ekmk}\nDIS: {total_dis}\n–ú–ü: {total_mp}\n–í—Å–µ–≥–æ –ï–ö/–ï–ö–ú–ö/Dis: {sum_sell}")
        else:
            await update.message.reply_text('–ù–µ –≤—ã–π–¥–µ—Ç)')
    elif text == "‚ùå –û—Ç–∏—á—Å—Ç–∏—å –ø—Ä–æ–¥–∞–∂–∏ ‚ùå":
        if int(update.message.from_user.id) == ADMIN or ADMIN_2 or ADMIN_3:
            cur.execute("SELECT * FROM baze_706  WHERE ek > 0 OR ekmk > 0 OR dis > 0 OR mp > 0 ")
            rows = cur.fetchall()
            for row in rows:
                await update.message.reply_text(f"{row[1]}: –ï–ö|–ï–ö–ú–ö|–î–ò–°|–ú–ü: {row[2:]}")
            await update.message.reply_text('–£–¥–∞–ª—è—é)')
            cur.execute('UPDATE baze_706 SET ek = 0, ekmk = 0, dis = 0, mp = 0;')
            con.commit()
        else:
            await update.message.reply_text('–ù–µ –≤—ã–π–¥–µ—Ç)')
    elif text == "–û—Ç—á–µ—Ç üìã":
        await update.message.reply_text('–ù–∞–ø–∏—à–∏ –æ–±–æ—Ä–æ—Ç, upt, —Å–±–ø, –∏ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä (12000 2.23 3000 8000)')

        
      
    if re.match(r"^–æ—Ç—á–µ—Ç", text2): 
        match = re.search(r"–æ—Ç—á–µ—Ç\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)", text, re.IGNORECASE)
        
        cur.execute("SELECT SUM(ek) FROM baze_706") 
        sum_ek = cur.fetchone()[0]
        cur.execute("SELECT SUM(ekmk) FROM baze_706") 
        sum_ekmk = cur.fetchone()[0]
        cur.execute("SELECT SUM(dis) FROM baze_706") 
        sum_dis = cur.fetchone()[0]
        sum_sell = sum_ek + sum_ekmk + sum_dis
        cur.execute("SELECT SUM(mp) FROM baze_706") 
        sum_mp = cur.fetchone()[0]
        
        if match:
            try:
                num1 = float(match.group(1))
                num2 = float(match.group(3))
                num3 = float(match.group(5))
                num4 = float(match.group(7))
                await update.message.reply_text(f'706\n{num2}\n–ï–ö: {int(sum_sell/num1*100)}% {int(sum_sell)}/{int(num1)}\nC–ë–ü: {int(num3/num4*100)}%\n–ú–ü: {sum_mp}')


            except ValueError:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏.")


    
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = ApplicationBuilder().token('7373924398:AAH43oT7Cu-WY_Dt8emZhzg18NTYcs3qk_g').build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()
    
          

if __name__ == '__main__':
    main()






































